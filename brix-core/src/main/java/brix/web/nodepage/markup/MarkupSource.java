package brix.web.nodepage.markup;

/**
 * Source for Node Page markup. The MarkupSources can be nested, with the
 * innermost MarkupSource providing the base markup (e.g. parsing an XML/HTML
 * data) and the wrapper MarkupSources doing transformations on it.
 * 
 * @author Matej Knopp
 */
public interface MarkupSource
{
	/**
	 * Returns next markup item. If there is no markup item left returns
	 * <code>null</code>.
	 * 
	 * @return next markup item or <code>null</code>
	 */
	public Item nextMarkupItem();

	/**
	 * Returns expiration token for the markup. The token will be remembered
	 * alongside the markup items and will be used to determine whether the
	 * generated markup is not yet expired (by being passed as argument to the
	 * {@link #isMarkupExpired(Object)} method.
	 * 
	 * This method is called when generating the markup before the first
	 * invocation of {@link #nextMarkupItem()}
	 * 
	 * @return expiration token
	 */
	public Object getExpirationToken();

	/**
	 * Determines if the markup generated with the given expiration token is
	 * already expired or still valid.
	 * 
	 * @param expirationToken
	 *            token generated by {@link #getExpirationToken()} before
	 *            generating actual markup
	 * @return <code>true</code> if the markup is already expired,
	 *         <code>false</code> if it is still valid.
	 */
	public boolean isMarkupExpired(Object expirationToken);
}
